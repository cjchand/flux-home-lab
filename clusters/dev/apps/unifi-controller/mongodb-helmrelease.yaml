apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: unifi-mongodb
  namespace: unifi
spec:
  interval: 1h
  chart:
    spec:
      chart: mongodb
      version: "16.5.29"
      sourceRef:
        kind: HelmRepository
        name: bitnami
        namespace: unifi
  values:
    global:
      storageClass: "nfs-client"
    architecture: standalone
    auth:
      enabled: true
      database: unifi
      username: unifi
      password: ""
      existingSecret: "unifi-mongodb-secret"
    primary:
      extraEnvVars:
        - name: MONGODB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: unifi-mongodb-secret
              key: mongodb-root-password
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: unifi-mongodb-secret
              key: mongodb-password
      persistence:
        enabled: true
        accessModes:
          - ReadWriteMany
        size: 8Gi
        annotations:
          nfs.io/createUID: "1001"
          nfs.io/createGID: "1001"
          nfs.io/createMode: "0755"
      resources:
        requests:
          cpu: 250m
          memory: 512Mi
        limits:
          cpu: 1000m
          memory: 1Gi
    service:
      type: ClusterIP
      ports:
        mongodb: 27017
    extraInitContainers:
      - name: mongo-init-user
        image: bitnami/mongodb:latest
        command:
          - /bin/bash
          - -c
          - |
            if which mongosh > /dev/null 2>&1; then
              mongo_init_bin='mongosh'
            else
              mongo_init_bin='mongo'
            fi
            "${mongo_init_bin}" <<EOF
            use ${MONGO_AUTHSOURCE}
            db.auth("${MONGO_INITDB_ROOT_USERNAME}", "${MONGO_INITDB_ROOT_PASSWORD}")
            db.createUser({
              user: "${MONGO_USER}",
              pwd: "${MONGO_PASS}",
              roles: [
                { db: "${MONGO_DBNAME}", role: "dbOwner" },
                { db: "${MONGO_DBNAME}_stat", role: "dbOwner" },
                { db: "${MONGO_DBNAME}_audit", role: "dbOwner" }
              ]
            })
            EOF
        env:
          - name: MONGO_AUTHSOURCE
            value: "admin"
          - name: MONGO_INITDB_ROOT_USERNAME
            valueFrom:
              secretKeyRef:
                name: mongodb-secret
                key: mongodb-root-username
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mongodb-secret
                key: mongodb-root-password
          - name: MONGO_USER
            valueFrom:
              secretKeyRef:
                name: mongodb-secret
                key: mongodb-user
          - name: MONGO_PASS
            valueFrom:
              secretKeyRef:
                name: mongodb-secret
                key: mongodb-password
          - name: MONGO_DBNAME
            value: "unifi"